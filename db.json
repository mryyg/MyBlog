{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/image/avatar.png","path":"image/avatar.png","modified":0,"renderable":0},{"_id":"source/image/favicon.svg","path":"image/favicon.svg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/prue-function.md","hash":"e082b5d23a2c90cdb42173107308d16a90c54da9","modified":1657805822063},{"_id":"source/_posts/binary-search-tree.md","hash":"ea1008c7f104f4e25a294e0e270e0204b9599752","modified":1657805822063},{"_id":"source/image/favicon.svg","hash":"d423606b2bbe7271b9000ced2f57d3d1f2e1800b","modified":1648460918208},{"_id":"source/image/avatar.png","hash":"b1dfa096aa97121f5f88daee68eb2cd888414600","modified":1648455558745},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"7ac5700b08830381131a212c8cda65d73375b438","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"b218746129e16d405b450da1c66d029ac1a94ba1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"196c358209e374cc6abfb76030b394a3f05ef7df","modified":1676612555895},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b65899433ce2ebee572a34fc0bd9e712d205f90d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1650351660226},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":499162500000},{"_id":"source/_posts/refresh-token.md","hash":"3d7369de9bb80f4dbb0a8dd107209036002856d3","modified":1657805822063},{"_id":"source/_posts/curry-compose.md","hash":"0d62c25f6f79f66bf9ea3106806cc19a10ebe0bc","modified":1660718006307},{"_id":"source/_posts/debounce-throttle.md","hash":"eb8362f663a1412465fc89126f504978f84661cf","modified":1660718006308},{"_id":"source/_posts/customHooks.md","hash":"eaf57d4464810f7af86a13076455ea23afaa10ac","modified":1681456447969},{"_id":"source/.DS_Store","hash":"1a11b115112b321007cac0f733c1aea354ed2ec8","modified":1681266148614},{"_id":"source/_posts/native-js.md","hash":"22c16b51574eef1f7e926d0b69bc780f889f8951","modified":1687661989246},{"_id":"source/_posts/seo.md","hash":"dea9f41f8cd76bc721d1499a92fc6dbdb20c31be","modified":1687665197366},{"_id":"public/2023/06/25/native-js/index.html","hash":"f937598b6782e91ecd59e1e6c5e3e21a25751db3","modified":1687767715511},{"_id":"public/2023/06/25/seo/index.html","hash":"bb444a9195ebdbe46f9b68f198b0ff2fcb4bf4e3","modified":1687767715511},{"_id":"public/2022/08/17/debounce-throttle/index.html","hash":"e5fd6455822713e588ec5c73845cefc023b78503","modified":1687767715511},{"_id":"public/2022/04/19/binary-search-tree/index.html","hash":"ef3d3553a94062acf51cbb05f4db6fc717350cb5","modified":1687767715511},{"_id":"public/2022/03/27/prue-function/index.html","hash":"e2edfb28dedd22dd549e88c0de777761bc14d05a","modified":1687767715511},{"_id":"public/archives/index.html","hash":"ce983cd31ab350d856430f02475dcc4c2f8f53f2","modified":1687767715511},{"_id":"public/archives/2022/index.html","hash":"815b1c3f44f125d2d3898c2777f36a32357c901d","modified":1687767715511},{"_id":"public/archives/2022/03/index.html","hash":"0cbd4e8db2bfb5562718be00fc2a941ec1a27389","modified":1687767715511},{"_id":"public/archives/2022/04/index.html","hash":"8133ba7825dceffaf12545f384f2064a806ee447","modified":1687767715511},{"_id":"public/archives/2022/07/index.html","hash":"4f2ec163f1adb2e7bd94e6c0861110bb51350c22","modified":1687767715511},{"_id":"public/archives/2022/08/index.html","hash":"ad6aa5acfb738bc506e6556b389a7a22a13e9ed6","modified":1687767715511},{"_id":"public/archives/2022/09/index.html","hash":"5e8dd35f4cc906cdb6a4548f0d2853d6d166e8a6","modified":1687767715511},{"_id":"public/archives/2023/index.html","hash":"838cf7f8ecbfc339db5393c0d1ea1ecf167b1f66","modified":1687767715511},{"_id":"public/archives/2023/06/index.html","hash":"20fe4abcfc2086626818e8d482382ad96cbd999b","modified":1687767715511},{"_id":"public/2022/09/27/customHooks/index.html","hash":"163ff14901bada61e5ad29a2ed782b6d9ec3e713","modified":1687767715511},{"_id":"public/2022/08/17/curry-compose/index.html","hash":"7bdbf267eab84b8dc429a78fe734d7c41030b9ec","modified":1687767715511},{"_id":"public/2022/07/14/refresh-token/index.html","hash":"482d7f96cd81b463c006530970d80f534029c3fb","modified":1687767715511},{"_id":"public/index.html","hash":"d260f2de5587ea494e46b48ea8cae557561cabbe","modified":1687767715511},{"_id":"public/image/favicon.svg","hash":"d423606b2bbe7271b9000ced2f57d3d1f2e1800b","modified":1687767715511},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1687767715511},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1687767715511},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1687767715511},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1687767715511},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1687767715511},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1687767715511},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1687767715511},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1687767715511},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1687767715511},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1687767715511},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1687767715511},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1687767715511},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1687767715511},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1687767715511},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1687767715511},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1687767715511},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1687767715511},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1687767715511},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1687767715511},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1687767715511},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1687767715511},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1687767715511},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1687767715511},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1687767715511},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1687767715511},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1687767715511},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1687767715511},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1687767715511},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1687767715511},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1687767715511},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1687767715511},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1687767715511},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1687767715511},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1687767715511},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1687767715511},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1687767715511},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1687767715511},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1687767715511},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1687767715511},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1687767715511},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1687767715511},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1687767715511},{"_id":"public/css/main.css","hash":"3332103c5e0120fd1efdf71ecab528a68e4c6c82","modified":1687767715511},{"_id":"public/image/avatar.png","hash":"b1dfa096aa97121f5f88daee68eb2cd888414600","modified":1687767715511},{"_id":"source/_posts/ci-cd.md","hash":"7b5d1f60a867485444cec05496123f87076a48d8","modified":1688107332586}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"binary-search-tree","date":"2022-04-19T06:41:29.000Z","_content":"> 搬运自己写在知乎的文章\n\n>https://zhuanlan.zhihu.com/p/110560615\n","source":"_posts/binary-search-tree.md","raw":"---\ntitle: binary-search-tree\ndate: 2022-04-19 14:41:29\ntags:\n---\n> 搬运自己写在知乎的文章\n\n>https://zhuanlan.zhihu.com/p/110560615\n","slug":"binary-search-tree","published":1,"updated":"2022-07-14T13:37:02.063Z","_id":"cl3mh73oq0000vkv3131i05za","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>搬运自己写在知乎的文章</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110560615\">https://zhuanlan.zhihu.com/p/110560615</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>搬运自己写在知乎的文章</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110560615\">https://zhuanlan.zhihu.com/p/110560615</a></p>\n</blockquote>\n"},{"title":"Prue function","date":"2022-03-27T11:44:12.000Z","_content":"\n\n## 概念\n> 纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用\n\n<!-- more -->\n\n## 栗子\n\n```\nvar arr = [1,2,3,4,5];\n\n// 纯的\narr.slice(0,3);\n//=> [1,2,3]\n\narr.slice(0,3);\n//=> [1,2,3]\n\narr.slice(0,3);\n//=> [1,2,3]\n\n\n// 不纯的\narr.splice(0,3);\n//=> [1,2,3]\n\narr.splice(0,3);\n//=> [4,5]\n\narr.splice(0,3);\n//=> []\n```\n\n看看另一个例子。\n\n```\n// 不纯的\nvar minimum = 21;\n\nvar checkAge = function(age) {\n  return age >= minimum;\n};\n\n\n// 纯的\nvar checkAge = function(age) {\n  var minimum = 21;\n  return age >= minimum;\n};\n```\n\n## 副作用可能包括...\n\n副作用可能包含，但不限于：\n\n> 更改文件系统\n> 往数据库插入记录\n> 发送一个 http 请求\n> 可变数据\n> 打印/log\n> 获取用户输入\n> DOM 查询\n> 访问系统状态\n\n## 追求“纯”的理由\n\n**可缓存性**\n**更易于观察和理解**\n**纯函数让测试更加容易**\n**引用透明性**","source":"_posts/prue-function.md","raw":"---\ntitle: Prue function\ndate: 2022-03-27 19:44:12\ntags:\n---\n\n\n## 概念\n> 纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用\n\n<!-- more -->\n\n## 栗子\n\n```\nvar arr = [1,2,3,4,5];\n\n// 纯的\narr.slice(0,3);\n//=> [1,2,3]\n\narr.slice(0,3);\n//=> [1,2,3]\n\narr.slice(0,3);\n//=> [1,2,3]\n\n\n// 不纯的\narr.splice(0,3);\n//=> [1,2,3]\n\narr.splice(0,3);\n//=> [4,5]\n\narr.splice(0,3);\n//=> []\n```\n\n看看另一个例子。\n\n```\n// 不纯的\nvar minimum = 21;\n\nvar checkAge = function(age) {\n  return age >= minimum;\n};\n\n\n// 纯的\nvar checkAge = function(age) {\n  var minimum = 21;\n  return age >= minimum;\n};\n```\n\n## 副作用可能包括...\n\n副作用可能包含，但不限于：\n\n> 更改文件系统\n> 往数据库插入记录\n> 发送一个 http 请求\n> 可变数据\n> 打印/log\n> 获取用户输入\n> DOM 查询\n> 访问系统状态\n\n## 追求“纯”的理由\n\n**可缓存性**\n**更易于观察和理解**\n**纯函数让测试更加容易**\n**引用透明性**","slug":"prue-function","published":1,"updated":"2022-07-14T13:37:02.063Z","_id":"cl3mh73ot0001vkv32e4j4dm8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\"></span><br><span class=\"line\">// 纯的</span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 不纯的</span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; [4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; []</span><br></pre></td></tr></table></figure>\n\n<p>看看另一个例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 不纯的</span><br><span class=\"line\">var minimum = 21;</span><br><span class=\"line\"></span><br><span class=\"line\">var checkAge = function(age) &#123;</span><br><span class=\"line\">  return age &gt;= minimum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 纯的</span><br><span class=\"line\">var checkAge = function(age) &#123;</span><br><span class=\"line\">  var minimum = 21;</span><br><span class=\"line\">  return age &gt;= minimum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"副作用可能包括…\"><a href=\"#副作用可能包括…\" class=\"headerlink\" title=\"副作用可能包括…\"></a>副作用可能包括…</h2><p>副作用可能包含，但不限于：</p>\n<blockquote>\n<p>更改文件系统<br>往数据库插入记录<br>发送一个 http 请求<br>可变数据<br>打印/log<br>获取用户输入<br>DOM 查询<br>访问系统状态</p>\n</blockquote>\n<h2 id=\"追求“纯”的理由\"><a href=\"#追求“纯”的理由\" class=\"headerlink\" title=\"追求“纯”的理由\"></a>追求“纯”的理由</h2><p><strong>可缓存性</strong><br><strong>更易于观察和理解</strong><br><strong>纯函数让测试更加容易</strong><br><strong>引用透明性</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用</p>\n</blockquote>","more":"<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\"></span><br><span class=\"line\">// 纯的</span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 不纯的</span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; [4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(0,3);</span><br><span class=\"line\">//=&gt; []</span><br></pre></td></tr></table></figure>\n\n<p>看看另一个例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 不纯的</span><br><span class=\"line\">var minimum = 21;</span><br><span class=\"line\"></span><br><span class=\"line\">var checkAge = function(age) &#123;</span><br><span class=\"line\">  return age &gt;= minimum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 纯的</span><br><span class=\"line\">var checkAge = function(age) &#123;</span><br><span class=\"line\">  var minimum = 21;</span><br><span class=\"line\">  return age &gt;= minimum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"副作用可能包括…\"><a href=\"#副作用可能包括…\" class=\"headerlink\" title=\"副作用可能包括…\"></a>副作用可能包括…</h2><p>副作用可能包含，但不限于：</p>\n<blockquote>\n<p>更改文件系统<br>往数据库插入记录<br>发送一个 http 请求<br>可变数据<br>打印/log<br>获取用户输入<br>DOM 查询<br>访问系统状态</p>\n</blockquote>\n<h2 id=\"追求“纯”的理由\"><a href=\"#追求“纯”的理由\" class=\"headerlink\" title=\"追求“纯”的理由\"></a>追求“纯”的理由</h2><p><strong>可缓存性</strong><br><strong>更易于观察和理解</strong><br><strong>纯函数让测试更加容易</strong><br><strong>引用透明性</strong></p>"},{"title":"refresh-token","date":"2022-07-14T13:37:02.063Z","_content":"\n\n## 无感刷新token-前端部分\n\n最近业务方那边反馈公司的aboss系统使用时会提示登录过期，需要重新登录，比较麻烦；于是项目主管让我们研究一下用户使用过程中token快过期时刷新token。\n\n<!-- more -->\n\n>思路\n\n刷新token需要前后端配合，后端会返回token和refreshToken两个字段，token用于正常调用接口鉴权，refreshToken用于tonken过期时换取新的token，token的时间较短，refreshToken的时间较长。\n\n然后就是具体实现，跟后台老哥约定的是当接口返回401的时候，去调刷新token的接口，如果有新token返回，就将用token替换旧token，然后重新调用一遍刚才返回401的接口，没有返回新token就跳转登录。\n\n需要注意多个接口同时调用时，一是要设置刷新token的状态，是否正在刷新中，如果是，后面接口就不要调刷新的接口了；二是需要处理阻塞的401接口，将其用Promise对象重新包裹一层后，当作resolve状态的值，再将Promise的resolve方法放入执行队列，等待刷新token完成后再重新执行。\n\n>代码\n\n```\n// 是否正在刷新的标记\nlet isRefreshing = false\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests = []\n\nfunction refreshTokenFun() {\n  const refreshToken = localStorage.getItem('refreshToken')\n  return refreshReq({ method: 'get', url: `/atoto-user/admin/refreshToken?refreshToken=${refreshToken}` })\n}\n\nif (res.code === 401) {\n        const config = response.config\n        if (!isRefreshing) {\n          isRefreshing = true\n          // debugger\n          return refreshTokenFun().then(res => {\n            const { code, data } = res.data\n            if (code === 200 && data) {\n              const { tokenHead, token, refreshToken } = data\n              const tokenStr = tokenHead + token\n              setToken(tokenStr)\n              localStorage.setItem('refreshToken', refreshToken)\n              config.headers['Authorization'] = tokenStr\n              // 已经刷新了token，将所有队列中的请求进行重试\n              requests.forEach(cb => cb(tokenStr))\n              requests = []\n              return request(config)\n            } else {\n              goLogin()\n            }\n          }).catch(err => {\n            console.log('refreshToken error', err)\n            // goLogin()\n          }).finally(() => {\n            isRefreshing = false\n          })\n        } else {\n          return new Promise((resolve) => {\n            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n            requests.push((token) => {\n              config.headers['Authorization'] = token\n              resolve(request(config))\n            })\n          })\n        }\n      }\n```\n","source":"_posts/refresh-token.md","raw":"---\ntitle:  refresh-token \ndate: {{ date }}\ntags:\n---\n\n\n## 无感刷新token-前端部分\n\n最近业务方那边反馈公司的aboss系统使用时会提示登录过期，需要重新登录，比较麻烦；于是项目主管让我们研究一下用户使用过程中token快过期时刷新token。\n\n<!-- more -->\n\n>思路\n\n刷新token需要前后端配合，后端会返回token和refreshToken两个字段，token用于正常调用接口鉴权，refreshToken用于tonken过期时换取新的token，token的时间较短，refreshToken的时间较长。\n\n然后就是具体实现，跟后台老哥约定的是当接口返回401的时候，去调刷新token的接口，如果有新token返回，就将用token替换旧token，然后重新调用一遍刚才返回401的接口，没有返回新token就跳转登录。\n\n需要注意多个接口同时调用时，一是要设置刷新token的状态，是否正在刷新中，如果是，后面接口就不要调刷新的接口了；二是需要处理阻塞的401接口，将其用Promise对象重新包裹一层后，当作resolve状态的值，再将Promise的resolve方法放入执行队列，等待刷新token完成后再重新执行。\n\n>代码\n\n```\n// 是否正在刷新的标记\nlet isRefreshing = false\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests = []\n\nfunction refreshTokenFun() {\n  const refreshToken = localStorage.getItem('refreshToken')\n  return refreshReq({ method: 'get', url: `/atoto-user/admin/refreshToken?refreshToken=${refreshToken}` })\n}\n\nif (res.code === 401) {\n        const config = response.config\n        if (!isRefreshing) {\n          isRefreshing = true\n          // debugger\n          return refreshTokenFun().then(res => {\n            const { code, data } = res.data\n            if (code === 200 && data) {\n              const { tokenHead, token, refreshToken } = data\n              const tokenStr = tokenHead + token\n              setToken(tokenStr)\n              localStorage.setItem('refreshToken', refreshToken)\n              config.headers['Authorization'] = tokenStr\n              // 已经刷新了token，将所有队列中的请求进行重试\n              requests.forEach(cb => cb(tokenStr))\n              requests = []\n              return request(config)\n            } else {\n              goLogin()\n            }\n          }).catch(err => {\n            console.log('refreshToken error', err)\n            // goLogin()\n          }).finally(() => {\n            isRefreshing = false\n          })\n        } else {\n          return new Promise((resolve) => {\n            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n            requests.push((token) => {\n              config.headers['Authorization'] = token\n              resolve(request(config))\n            })\n          })\n        }\n      }\n```\n","slug":"refresh-token","published":1,"updated":"2022-07-14T13:37:02.063Z","_id":"cl5g4pshh00007ov30e3z859u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"无感刷新token-前端部分\"><a href=\"#无感刷新token-前端部分\" class=\"headerlink\" title=\"无感刷新token-前端部分\"></a>无感刷新token-前端部分</h2><p>最近业务方那边反馈公司的aboss系统使用时会提示登录过期，需要重新登录，比较麻烦；于是项目主管让我们研究一下用户使用过程中token快过期时刷新token。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>思路</p>\n</blockquote>\n<p>刷新token需要前后端配合，后端会返回token和refreshToken两个字段，token用于正常调用接口鉴权，refreshToken用于tonken过期时换取新的token，token的时间较短，refreshToken的时间较长。</p>\n<p>然后就是具体实现，跟后台老哥约定的是当接口返回401的时候，去调刷新token的接口，如果有新token返回，就将用token替换旧token，然后重新调用一遍刚才返回401的接口，没有返回新token就跳转登录。</p>\n<p>需要注意多个接口同时调用时，一是要设置刷新token的状态，是否正在刷新中，如果是，后面接口就不要调刷新的接口了；二是需要处理阻塞的401接口，将其用Promise对象重新包裹一层后，当作resolve状态的值，再将Promise的resolve方法放入执行队列，等待刷新token完成后再重新执行。</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshTokenFun() &#123;</span><br><span class=\"line\">  const refreshToken = localStorage.getItem(&#x27;refreshToken&#x27;)</span><br><span class=\"line\">  return refreshReq(&#123; method: &#x27;get&#x27;, url: `/atoto-user/admin/refreshToken?refreshToken=$&#123;refreshToken&#125;` &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (res.code === 401) &#123;</span><br><span class=\"line\">        const config = response.config</span><br><span class=\"line\">        if (!isRefreshing) &#123;</span><br><span class=\"line\">          isRefreshing = true</span><br><span class=\"line\">          // debugger</span><br><span class=\"line\">          return refreshTokenFun().then(res =&gt; &#123;</span><br><span class=\"line\">            const &#123; code, data &#125; = res.data</span><br><span class=\"line\">            if (code === 200 &amp;&amp; data) &#123;</span><br><span class=\"line\">              const &#123; tokenHead, token, refreshToken &#125; = data</span><br><span class=\"line\">              const tokenStr = tokenHead + token</span><br><span class=\"line\">              setToken(tokenStr)</span><br><span class=\"line\">              localStorage.setItem(&#x27;refreshToken&#x27;, refreshToken)</span><br><span class=\"line\">              config.headers[&#x27;Authorization&#x27;] = tokenStr</span><br><span class=\"line\">              // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">              requests.forEach(cb =&gt; cb(tokenStr))</span><br><span class=\"line\">              requests = []</span><br><span class=\"line\">              return request(config)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              goLogin()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">            console.log(&#x27;refreshToken error&#x27;, err)</span><br><span class=\"line\">            // goLogin()</span><br><span class=\"line\">          &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">            isRefreshing = false</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">            requests.push((token) =&gt; &#123;</span><br><span class=\"line\">              config.headers[&#x27;Authorization&#x27;] = token</span><br><span class=\"line\">              resolve(request(config))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"无感刷新token-前端部分\"><a href=\"#无感刷新token-前端部分\" class=\"headerlink\" title=\"无感刷新token-前端部分\"></a>无感刷新token-前端部分</h2><p>最近业务方那边反馈公司的aboss系统使用时会提示登录过期，需要重新登录，比较麻烦；于是项目主管让我们研究一下用户使用过程中token快过期时刷新token。</p>","more":"<blockquote>\n<p>思路</p>\n</blockquote>\n<p>刷新token需要前后端配合，后端会返回token和refreshToken两个字段，token用于正常调用接口鉴权，refreshToken用于tonken过期时换取新的token，token的时间较短，refreshToken的时间较长。</p>\n<p>然后就是具体实现，跟后台老哥约定的是当接口返回401的时候，去调刷新token的接口，如果有新token返回，就将用token替换旧token，然后重新调用一遍刚才返回401的接口，没有返回新token就跳转登录。</p>\n<p>需要注意多个接口同时调用时，一是要设置刷新token的状态，是否正在刷新中，如果是，后面接口就不要调刷新的接口了；二是需要处理阻塞的401接口，将其用Promise对象重新包裹一层后，当作resolve状态的值，再将Promise的resolve方法放入执行队列，等待刷新token完成后再重新执行。</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshTokenFun() &#123;</span><br><span class=\"line\">  const refreshToken = localStorage.getItem(&#x27;refreshToken&#x27;)</span><br><span class=\"line\">  return refreshReq(&#123; method: &#x27;get&#x27;, url: `/atoto-user/admin/refreshToken?refreshToken=$&#123;refreshToken&#125;` &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (res.code === 401) &#123;</span><br><span class=\"line\">        const config = response.config</span><br><span class=\"line\">        if (!isRefreshing) &#123;</span><br><span class=\"line\">          isRefreshing = true</span><br><span class=\"line\">          // debugger</span><br><span class=\"line\">          return refreshTokenFun().then(res =&gt; &#123;</span><br><span class=\"line\">            const &#123; code, data &#125; = res.data</span><br><span class=\"line\">            if (code === 200 &amp;&amp; data) &#123;</span><br><span class=\"line\">              const &#123; tokenHead, token, refreshToken &#125; = data</span><br><span class=\"line\">              const tokenStr = tokenHead + token</span><br><span class=\"line\">              setToken(tokenStr)</span><br><span class=\"line\">              localStorage.setItem(&#x27;refreshToken&#x27;, refreshToken)</span><br><span class=\"line\">              config.headers[&#x27;Authorization&#x27;] = tokenStr</span><br><span class=\"line\">              // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">              requests.forEach(cb =&gt; cb(tokenStr))</span><br><span class=\"line\">              requests = []</span><br><span class=\"line\">              return request(config)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              goLogin()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">            console.log(&#x27;refreshToken error&#x27;, err)</span><br><span class=\"line\">            // goLogin()</span><br><span class=\"line\">          &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">            isRefreshing = false</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">            requests.push((token) =&gt; &#123;</span><br><span class=\"line\">              config.headers[&#x27;Authorization&#x27;] = token</span><br><span class=\"line\">              resolve(request(config))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>"},{"title":"函数柯里化（curry）和组合（compose）","date":"2022-08-17T06:33:26.307Z","_content":"\n> 和纯函数一样，柯里化（curry）和组合（compose）是函数式编程里非常重要的两个概念。\n<!-- more -->\n\n## 柯里化（curry）\n\n> 概念：柯里化就是把一个多参数的函数转换为一个嵌套的单参数函数的过程，允许只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n#### 先来看一个小栗子\n```\n// 普通函数\nfunction add1(x, y) {\n  return x + y\n}\nconsole.log(add1(2, 10))\n\n// 柯里化函数\nfunction add2(x) {\n  return function (y) {\n    return x + y\n  }\n}\n\nconsole.log(add2(2)(10))\n```\n\n#### 柯里化的作用\n\n**参数复用,让函数的职责单一**\n```\n// 普通函数\nfunction add1(x, y) {\n  return x + y\n}\nconsole.log(add1(10, 10)) // 20\nconsole.log(add1(10, 1)) // 11\nconsole.log(add1(10, 100)) // 110\n\n// 柯里化函数\nfunction add2(x) {\n  return function (y) {\n    return x + y\n  }\n}\nconst addTen = add2(10)\n\nconsole.log(addTen(10)) // 20\nconsole.log(addTen(1)) // 11\nconsole.log(addTen(100)) // 110\n```\n调用add2之后，返回的addTen函数就通过闭包的方式记住了 add2 的第一个参数, 并且addTen函数功能明确。\n\n\n#### 实现一个简单的curry函数生成器\n\n```\nconst curryGenerator = (fn) => {\n  return function curryFunc(...args) {\n    // 如果传入的参数已经足够，则直接调用函数fn\n    if (args.length >= fn.length) {\n      return fn(...args)\n    } else {\n      // 否则返回一个新的函数，接收后面传递的新参数；合并参数，递归调用curryFunc\n      return (...newArgs) => curryFunc(...args.concat(newArgs))\n    }\n  }\n}\n```\n\n来创建一个curry函数检验一下\n```\nconst match = curryGenerator(function (what, str) {\n  return str.match(what);\n});\n\nconsole.log(match(/\\s+/g, 'hello word')) // [ ' ' ]\nconst hasSpace = match(/\\s+/g)\nconsole.log(hasSpace('hello word')) // [ ' ' ]\nconsole.log(hasSpace('spaceless')) // null\n```\n\n注意上面代码，我们在使用curry函数时，会策略性地把要操作的数据，放到最后一个参数里。\n\n## 组合（compose）\n\n> 概念： 组合多个函数，同时返回一个新的函数；调用时，组合函数按顺序从右向左执行；右边函数调用后，返回的结果，作为左边函数的参数传入，严格保证了执行顺序。\n\n```\nconst compose = function(f,g) {\n  return function(x) {\n    return f(g(x));\n  };\n};\n\nconst toUpperCase = function (x) { return x.toUpperCase(); };\nconst addExclaim = function (x) { return x + '!'; };\nconst finalStr = compose(addExclaim, toUpperCase);\n\nconsole.log(finalStr('hello world')) // HELLO WORLD!\n```\n\nf 和 g 都是函数，参数x在函数间就好像通过管道传输一样；g 将先于 f 执行，因此就创建了一个从右到左的数据流，这样做的可读性远远高于嵌套一大堆的函数调用。\n如果不用compose，上面的finalStr函数就会下面是这样：\n\n```\nconst finalStr = (x)=>{\n  return addExclaim(toUpperCase(x))\n}\n```\n完善一下compose函数，以适应传入更多函数和参数\n\n```\nfunction compose(...fns) {\n  if (fns.lenth == 0) return (...args) => args\n  return function (...args) {\n    let index = fns.length - 1\n    let result = fns[index].apply(this, args)\n    while (index--) {\n      result = fns[index].call(this, result)\n    }\n    return result\n  }\n}\n```\n更高级的实现\n```\nfunction compose(...fns) {\n  if (fns.lenth == 0) return (...args) => args\n  if (fns.length === 1) return fns[0]\n  return fns.reduce((f,g)=>(...args)=>f(g(...args)))\n}\n```\n这里借鉴dan大神的代码，非常巧妙的将下一个函数的执行结果作为参数传递给上一个函数，并在最后返回一个接收实际参数的函数。","source":"_posts/curry-compose.md","raw":"---\ntitle: 函数柯里化（curry）和组合（compose）\ndate: {{ date }}\ntags:\n---\n\n> 和纯函数一样，柯里化（curry）和组合（compose）是函数式编程里非常重要的两个概念。\n<!-- more -->\n\n## 柯里化（curry）\n\n> 概念：柯里化就是把一个多参数的函数转换为一个嵌套的单参数函数的过程，允许只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n#### 先来看一个小栗子\n```\n// 普通函数\nfunction add1(x, y) {\n  return x + y\n}\nconsole.log(add1(2, 10))\n\n// 柯里化函数\nfunction add2(x) {\n  return function (y) {\n    return x + y\n  }\n}\n\nconsole.log(add2(2)(10))\n```\n\n#### 柯里化的作用\n\n**参数复用,让函数的职责单一**\n```\n// 普通函数\nfunction add1(x, y) {\n  return x + y\n}\nconsole.log(add1(10, 10)) // 20\nconsole.log(add1(10, 1)) // 11\nconsole.log(add1(10, 100)) // 110\n\n// 柯里化函数\nfunction add2(x) {\n  return function (y) {\n    return x + y\n  }\n}\nconst addTen = add2(10)\n\nconsole.log(addTen(10)) // 20\nconsole.log(addTen(1)) // 11\nconsole.log(addTen(100)) // 110\n```\n调用add2之后，返回的addTen函数就通过闭包的方式记住了 add2 的第一个参数, 并且addTen函数功能明确。\n\n\n#### 实现一个简单的curry函数生成器\n\n```\nconst curryGenerator = (fn) => {\n  return function curryFunc(...args) {\n    // 如果传入的参数已经足够，则直接调用函数fn\n    if (args.length >= fn.length) {\n      return fn(...args)\n    } else {\n      // 否则返回一个新的函数，接收后面传递的新参数；合并参数，递归调用curryFunc\n      return (...newArgs) => curryFunc(...args.concat(newArgs))\n    }\n  }\n}\n```\n\n来创建一个curry函数检验一下\n```\nconst match = curryGenerator(function (what, str) {\n  return str.match(what);\n});\n\nconsole.log(match(/\\s+/g, 'hello word')) // [ ' ' ]\nconst hasSpace = match(/\\s+/g)\nconsole.log(hasSpace('hello word')) // [ ' ' ]\nconsole.log(hasSpace('spaceless')) // null\n```\n\n注意上面代码，我们在使用curry函数时，会策略性地把要操作的数据，放到最后一个参数里。\n\n## 组合（compose）\n\n> 概念： 组合多个函数，同时返回一个新的函数；调用时，组合函数按顺序从右向左执行；右边函数调用后，返回的结果，作为左边函数的参数传入，严格保证了执行顺序。\n\n```\nconst compose = function(f,g) {\n  return function(x) {\n    return f(g(x));\n  };\n};\n\nconst toUpperCase = function (x) { return x.toUpperCase(); };\nconst addExclaim = function (x) { return x + '!'; };\nconst finalStr = compose(addExclaim, toUpperCase);\n\nconsole.log(finalStr('hello world')) // HELLO WORLD!\n```\n\nf 和 g 都是函数，参数x在函数间就好像通过管道传输一样；g 将先于 f 执行，因此就创建了一个从右到左的数据流，这样做的可读性远远高于嵌套一大堆的函数调用。\n如果不用compose，上面的finalStr函数就会下面是这样：\n\n```\nconst finalStr = (x)=>{\n  return addExclaim(toUpperCase(x))\n}\n```\n完善一下compose函数，以适应传入更多函数和参数\n\n```\nfunction compose(...fns) {\n  if (fns.lenth == 0) return (...args) => args\n  return function (...args) {\n    let index = fns.length - 1\n    let result = fns[index].apply(this, args)\n    while (index--) {\n      result = fns[index].call(this, result)\n    }\n    return result\n  }\n}\n```\n更高级的实现\n```\nfunction compose(...fns) {\n  if (fns.lenth == 0) return (...args) => args\n  if (fns.length === 1) return fns[0]\n  return fns.reduce((f,g)=>(...args)=>f(g(...args)))\n}\n```\n这里借鉴dan大神的代码，非常巧妙的将下一个函数的执行结果作为参数传递给上一个函数，并在最后返回一个接收实际参数的函数。","slug":"curry-compose","published":1,"updated":"2022-08-17T06:33:26.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6x8w5a80000q8rw0nym5h08","content":"<blockquote>\n<p>和纯函数一样，柯里化（curry）和组合（compose）是函数式编程里非常重要的两个概念。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"柯里化（curry）\"><a href=\"#柯里化（curry）\" class=\"headerlink\" title=\"柯里化（curry）\"></a>柯里化（curry）</h2><blockquote>\n<p>概念：柯里化就是把一个多参数的函数转换为一个嵌套的单参数函数的过程，允许只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n</blockquote>\n<h4 id=\"先来看一个小栗子\"><a href=\"#先来看一个小栗子\" class=\"headerlink\" title=\"先来看一个小栗子\"></a>先来看一个小栗子</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通函数</span><br><span class=\"line\">function add1(x, y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add1(2, 10))</span><br><span class=\"line\"></span><br><span class=\"line\">// 柯里化函数</span><br><span class=\"line\">function add2(x) &#123;</span><br><span class=\"line\">  return function (y) &#123;</span><br><span class=\"line\">    return x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add2(2)(10))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"柯里化的作用\"><a href=\"#柯里化的作用\" class=\"headerlink\" title=\"柯里化的作用\"></a>柯里化的作用</h4><p><strong>参数复用,让函数的职责单一</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通函数</span><br><span class=\"line\">function add1(x, y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add1(10, 10)) // 20</span><br><span class=\"line\">console.log(add1(10, 1)) // 11</span><br><span class=\"line\">console.log(add1(10, 100)) // 110</span><br><span class=\"line\"></span><br><span class=\"line\">// 柯里化函数</span><br><span class=\"line\">function add2(x) &#123;</span><br><span class=\"line\">  return function (y) &#123;</span><br><span class=\"line\">    return x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const addTen = add2(10)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(addTen(10)) // 20</span><br><span class=\"line\">console.log(addTen(1)) // 11</span><br><span class=\"line\">console.log(addTen(100)) // 110</span><br></pre></td></tr></table></figure>\n<p>调用add2之后，返回的addTen函数就通过闭包的方式记住了 add2 的第一个参数, 并且addTen函数功能明确。</p>\n<h4 id=\"实现一个简单的curry函数生成器\"><a href=\"#实现一个简单的curry函数生成器\" class=\"headerlink\" title=\"实现一个简单的curry函数生成器\"></a>实现一个简单的curry函数生成器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const curryGenerator = (fn) =&gt; &#123;</span><br><span class=\"line\">  return function curryFunc(...args) &#123;</span><br><span class=\"line\">    // 如果传入的参数已经足够，则直接调用函数fn</span><br><span class=\"line\">    if (args.length &gt;= fn.length) &#123;</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 否则返回一个新的函数，接收后面传递的新参数；合并参数，递归调用curryFunc</span><br><span class=\"line\">      return (...newArgs) =&gt; curryFunc(...args.concat(newArgs))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来创建一个curry函数检验一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const match = curryGenerator(function (what, str) &#123;</span><br><span class=\"line\">  return str.match(what);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(match(/\\s+/g, &#x27;hello word&#x27;)) // [ &#x27; &#x27; ]</span><br><span class=\"line\">const hasSpace = match(/\\s+/g)</span><br><span class=\"line\">console.log(hasSpace(&#x27;hello word&#x27;)) // [ &#x27; &#x27; ]</span><br><span class=\"line\">console.log(hasSpace(&#x27;spaceless&#x27;)) // null</span><br></pre></td></tr></table></figure>\n\n<p>注意上面代码，我们在使用curry函数时，会策略性地把要操作的数据，放到最后一个参数里。</p>\n<h2 id=\"组合（compose）\"><a href=\"#组合（compose）\" class=\"headerlink\" title=\"组合（compose）\"></a>组合（compose）</h2><blockquote>\n<p>概念： 组合多个函数，同时返回一个新的函数；调用时，组合函数按顺序从右向左执行；右边函数调用后，返回的结果，作为左边函数的参数传入，严格保证了执行顺序。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = function(f,g) &#123;</span><br><span class=\"line\">  return function(x) &#123;</span><br><span class=\"line\">    return f(g(x));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const toUpperCase = function (x) &#123; return x.toUpperCase(); &#125;;</span><br><span class=\"line\">const addExclaim = function (x) &#123; return x + &#x27;!&#x27;; &#125;;</span><br><span class=\"line\">const finalStr = compose(addExclaim, toUpperCase);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(finalStr(&#x27;hello world&#x27;)) // HELLO WORLD!</span><br></pre></td></tr></table></figure>\n\n<p>f 和 g 都是函数，参数x在函数间就好像通过管道传输一样；g 将先于 f 执行，因此就创建了一个从右到左的数据流，这样做的可读性远远高于嵌套一大堆的函数调用。<br>如果不用compose，上面的finalStr函数就会下面是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const finalStr = (x)=&gt;&#123;</span><br><span class=\"line\">  return addExclaim(toUpperCase(x))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完善一下compose函数，以适应传入更多函数和参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">  if (fns.lenth == 0) return (...args) =&gt; args</span><br><span class=\"line\">  return function (...args) &#123;</span><br><span class=\"line\">    let index = fns.length - 1</span><br><span class=\"line\">    let result = fns[index].apply(this, args)</span><br><span class=\"line\">    while (index--) &#123;</span><br><span class=\"line\">      result = fns[index].call(this, result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更高级的实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">  if (fns.lenth == 0) return (...args) =&gt; args</span><br><span class=\"line\">  if (fns.length === 1) return fns[0]</span><br><span class=\"line\">  return fns.reduce((f,g)=&gt;(...args)=&gt;f(g(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里借鉴dan大神的代码，非常巧妙的将下一个函数的执行结果作为参数传递给上一个函数，并在最后返回一个接收实际参数的函数。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>和纯函数一样，柯里化（curry）和组合（compose）是函数式编程里非常重要的两个概念。</p>\n</blockquote>","more":"<h2 id=\"柯里化（curry）\"><a href=\"#柯里化（curry）\" class=\"headerlink\" title=\"柯里化（curry）\"></a>柯里化（curry）</h2><blockquote>\n<p>概念：柯里化就是把一个多参数的函数转换为一个嵌套的单参数函数的过程，允许只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n</blockquote>\n<h4 id=\"先来看一个小栗子\"><a href=\"#先来看一个小栗子\" class=\"headerlink\" title=\"先来看一个小栗子\"></a>先来看一个小栗子</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通函数</span><br><span class=\"line\">function add1(x, y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add1(2, 10))</span><br><span class=\"line\"></span><br><span class=\"line\">// 柯里化函数</span><br><span class=\"line\">function add2(x) &#123;</span><br><span class=\"line\">  return function (y) &#123;</span><br><span class=\"line\">    return x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add2(2)(10))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"柯里化的作用\"><a href=\"#柯里化的作用\" class=\"headerlink\" title=\"柯里化的作用\"></a>柯里化的作用</h4><p><strong>参数复用,让函数的职责单一</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通函数</span><br><span class=\"line\">function add1(x, y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add1(10, 10)) // 20</span><br><span class=\"line\">console.log(add1(10, 1)) // 11</span><br><span class=\"line\">console.log(add1(10, 100)) // 110</span><br><span class=\"line\"></span><br><span class=\"line\">// 柯里化函数</span><br><span class=\"line\">function add2(x) &#123;</span><br><span class=\"line\">  return function (y) &#123;</span><br><span class=\"line\">    return x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const addTen = add2(10)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(addTen(10)) // 20</span><br><span class=\"line\">console.log(addTen(1)) // 11</span><br><span class=\"line\">console.log(addTen(100)) // 110</span><br></pre></td></tr></table></figure>\n<p>调用add2之后，返回的addTen函数就通过闭包的方式记住了 add2 的第一个参数, 并且addTen函数功能明确。</p>\n<h4 id=\"实现一个简单的curry函数生成器\"><a href=\"#实现一个简单的curry函数生成器\" class=\"headerlink\" title=\"实现一个简单的curry函数生成器\"></a>实现一个简单的curry函数生成器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const curryGenerator = (fn) =&gt; &#123;</span><br><span class=\"line\">  return function curryFunc(...args) &#123;</span><br><span class=\"line\">    // 如果传入的参数已经足够，则直接调用函数fn</span><br><span class=\"line\">    if (args.length &gt;= fn.length) &#123;</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 否则返回一个新的函数，接收后面传递的新参数；合并参数，递归调用curryFunc</span><br><span class=\"line\">      return (...newArgs) =&gt; curryFunc(...args.concat(newArgs))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来创建一个curry函数检验一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const match = curryGenerator(function (what, str) &#123;</span><br><span class=\"line\">  return str.match(what);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(match(/\\s+/g, &#x27;hello word&#x27;)) // [ &#x27; &#x27; ]</span><br><span class=\"line\">const hasSpace = match(/\\s+/g)</span><br><span class=\"line\">console.log(hasSpace(&#x27;hello word&#x27;)) // [ &#x27; &#x27; ]</span><br><span class=\"line\">console.log(hasSpace(&#x27;spaceless&#x27;)) // null</span><br></pre></td></tr></table></figure>\n\n<p>注意上面代码，我们在使用curry函数时，会策略性地把要操作的数据，放到最后一个参数里。</p>\n<h2 id=\"组合（compose）\"><a href=\"#组合（compose）\" class=\"headerlink\" title=\"组合（compose）\"></a>组合（compose）</h2><blockquote>\n<p>概念： 组合多个函数，同时返回一个新的函数；调用时，组合函数按顺序从右向左执行；右边函数调用后，返回的结果，作为左边函数的参数传入，严格保证了执行顺序。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = function(f,g) &#123;</span><br><span class=\"line\">  return function(x) &#123;</span><br><span class=\"line\">    return f(g(x));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const toUpperCase = function (x) &#123; return x.toUpperCase(); &#125;;</span><br><span class=\"line\">const addExclaim = function (x) &#123; return x + &#x27;!&#x27;; &#125;;</span><br><span class=\"line\">const finalStr = compose(addExclaim, toUpperCase);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(finalStr(&#x27;hello world&#x27;)) // HELLO WORLD!</span><br></pre></td></tr></table></figure>\n\n<p>f 和 g 都是函数，参数x在函数间就好像通过管道传输一样；g 将先于 f 执行，因此就创建了一个从右到左的数据流，这样做的可读性远远高于嵌套一大堆的函数调用。<br>如果不用compose，上面的finalStr函数就会下面是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const finalStr = (x)=&gt;&#123;</span><br><span class=\"line\">  return addExclaim(toUpperCase(x))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完善一下compose函数，以适应传入更多函数和参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">  if (fns.lenth == 0) return (...args) =&gt; args</span><br><span class=\"line\">  return function (...args) &#123;</span><br><span class=\"line\">    let index = fns.length - 1</span><br><span class=\"line\">    let result = fns[index].apply(this, args)</span><br><span class=\"line\">    while (index--) &#123;</span><br><span class=\"line\">      result = fns[index].call(this, result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更高级的实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">  if (fns.lenth == 0) return (...args) =&gt; args</span><br><span class=\"line\">  if (fns.length === 1) return fns[0]</span><br><span class=\"line\">  return fns.reduce((f,g)=&gt;(...args)=&gt;f(g(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里借鉴dan大神的代码，非常巧妙的将下一个函数的执行结果作为参数传递给上一个函数，并在最后返回一个接收实际参数的函数。</p>"},{"title":"防抖和节流","date":"2022-08-17T06:33:26.308Z","_content":"\n防抖和节流本质上都是优化高频率执行代码的一种手段;\n防抖是延迟周期内如果有新动作进入，旧的动作将会被取消,将多次执行变为最后一次执行。\n而节流是将多次执行变成每隔一段时间执行。\n\n<!-- more -->\n\n## 防抖\n\n```\nfunction debounce(fn, wait) {\n            let timer;\n            return (...args) => {\n                if (timer) clearTimeout(timer)\n                timer = setTimeout(() => {\n                    timer = null\n                    fn.apply(this, args)\n                }, wait)\n            }\n        }\n```\n\n## 节流\n\n```\nfunction throttle (fn, wait) {\n            let preTime = 0, timer;\n            return function (...args) {\n                const ctx = this\n                const curTime = Date.now()\n                const remaining = curTime - preTime - wait\n                clearTimeout(timer)\n                if (remaining>=0) {\n                    fn.apply(this, args)\n                    preTime = Date.now()\n                }else{\n                    timer = setTimeout(()=>{\n                        fn.apply(ctx,args)\n                    },wait)\n                }\n            }\n        };\n```","source":"_posts/debounce-throttle.md","raw":"---\ntitle: 防抖和节流\ndate: {{ date }}\ntags:\n---\n\n防抖和节流本质上都是优化高频率执行代码的一种手段;\n防抖是延迟周期内如果有新动作进入，旧的动作将会被取消,将多次执行变为最后一次执行。\n而节流是将多次执行变成每隔一段时间执行。\n\n<!-- more -->\n\n## 防抖\n\n```\nfunction debounce(fn, wait) {\n            let timer;\n            return (...args) => {\n                if (timer) clearTimeout(timer)\n                timer = setTimeout(() => {\n                    timer = null\n                    fn.apply(this, args)\n                }, wait)\n            }\n        }\n```\n\n## 节流\n\n```\nfunction throttle (fn, wait) {\n            let preTime = 0, timer;\n            return function (...args) {\n                const ctx = this\n                const curTime = Date.now()\n                const remaining = curTime - preTime - wait\n                clearTimeout(timer)\n                if (remaining>=0) {\n                    fn.apply(this, args)\n                    preTime = Date.now()\n                }else{\n                    timer = setTimeout(()=>{\n                        fn.apply(ctx,args)\n                    },wait)\n                }\n            }\n        };\n```","slug":"debounce-throttle","published":1,"updated":"2022-08-17T06:33:26.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6x8w5az0001q8rw2y54bpbm","content":"<p>防抖和节流本质上都是优化高频率执行代码的一种手段;<br>防抖是延迟周期内如果有新动作进入，旧的动作将会被取消,将多次执行变为最后一次执行。<br>而节流是将多次执行变成每隔一段时间执行。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(fn, wait) &#123;</span><br><span class=\"line\">            let timer;</span><br><span class=\"line\">            return (...args) =&gt; &#123;</span><br><span class=\"line\">                if (timer) clearTimeout(timer)</span><br><span class=\"line\">                timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">                    timer = null</span><br><span class=\"line\">                    fn.apply(this, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (fn, wait) &#123;</span><br><span class=\"line\">            let preTime = 0, timer;</span><br><span class=\"line\">            return function (...args) &#123;</span><br><span class=\"line\">                const ctx = this</span><br><span class=\"line\">                const curTime = Date.now()</span><br><span class=\"line\">                const remaining = curTime - preTime - wait</span><br><span class=\"line\">                clearTimeout(timer)</span><br><span class=\"line\">                if (remaining&gt;=0) &#123;</span><br><span class=\"line\">                    fn.apply(this, args)</span><br><span class=\"line\">                    preTime = Date.now()</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                        fn.apply(ctx,args)</span><br><span class=\"line\">                    &#125;,wait)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>防抖和节流本质上都是优化高频率执行代码的一种手段;<br>防抖是延迟周期内如果有新动作进入，旧的动作将会被取消,将多次执行变为最后一次执行。<br>而节流是将多次执行变成每隔一段时间执行。</p>","more":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(fn, wait) &#123;</span><br><span class=\"line\">            let timer;</span><br><span class=\"line\">            return (...args) =&gt; &#123;</span><br><span class=\"line\">                if (timer) clearTimeout(timer)</span><br><span class=\"line\">                timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">                    timer = null</span><br><span class=\"line\">                    fn.apply(this, args)</span><br><span class=\"line\">                &#125;, wait)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (fn, wait) &#123;</span><br><span class=\"line\">            let preTime = 0, timer;</span><br><span class=\"line\">            return function (...args) &#123;</span><br><span class=\"line\">                const ctx = this</span><br><span class=\"line\">                const curTime = Date.now()</span><br><span class=\"line\">                const remaining = curTime - preTime - wait</span><br><span class=\"line\">                clearTimeout(timer)</span><br><span class=\"line\">                if (remaining&gt;=0) &#123;</span><br><span class=\"line\">                    fn.apply(this, args)</span><br><span class=\"line\">                    preTime = Date.now()</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                        fn.apply(ctx,args)</span><br><span class=\"line\">                    &#125;,wait)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>"},{"title":"custom hooks","date":"2022-09-27T10:32:16.748Z","_content":"\n一些平时项目中封装的自定义hooks\n\n<!-- more -->\n1、useWatch\n\n>代码\n\n```\ntype Callback<T> = (prev: T | undefined) => void\ntype Config = {\n  immediate: boolean\n}\n\nexport function useWatch<T>(\n  dep: T,\n  callback: Callback<T>,\n  config: Config = { immediate: false },\n) {\n  const { immediate } = config\n\n  const prev = useRef<T>()\n  const inited = useRef(false)\n\n  useEffect(() => {\n    const execute = () => callback(prev.current)\n\n    if (!inited.current) {\n      inited.current = true\n      if (immediate) {\n        execute()\n      }\n    } else {\n      execute()\n    }\n    prev.current = dep\n  }, [dep])\n}\n```\n\n2、useEffectAsync\n\n```\nexport const useEffectAsync = (effect, deps) => {\n  const dispatch = useDispatch();\n  const ref = useRef();\n  useEffect(() => {\n    effect()\n      .then((result) => ref.current = result)\n      .catch((error) => dispatch(errorsActions.push(error.message)));\n      \n    return () => {\n      const result = ref.current;\n      if (result) {\n        result();\n      }\n    };\n  }, [...deps, dispatch]);\n};\n```\n\n3.useForm\n```\nexport default () => {\n    const [formData, setFormData] = useState({});\n    const [errors, setErrors] = useState({});\n    const [validates, setValidates] = useState({});\n\n    const register = (name, { defaultValue, validate }) => {\n        if (!name) throw new Error('name is required');\n        if (formData[name] === undefined) setFormData((prev) => ({ ...prev, [name]: defaultValue || '' }))\n        if (errors[name] === undefined) setErrors((prev) => ({ ...prev, [name]: '' }));\n        if (validate && validates[name] === undefined) setValidates((prev) => ({ ...prev, [name]: validate }))\n\n        return {\n            value: formData[name] || '',\n            error: !!errors[name],\n            onChange: (event) => {\n                const { value } = event.target;\n                setFormData((prev) => ({ ...prev, [name]: value }));\n                validate && setErrors((prev) => ({ ...prev, [name]: validate(value) }));\n            },\n            onBlur: () => {\n                validate && setErrors((prev) => ({ ...prev, [name]: validate(formData[name]) }));\n            },\n        };\n    }\n\n    const unregister = (name) => {\n        if (!name) throw new Error('name is required');\n        setFormData((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n        setErrors((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n        setValidates((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n    }\n\n    const handleSubmit = (callback) => {\n        if (!callback) throw new Error('callback is required');\n        const newErrors = Object.keys(validates).reduce((acc, name) => {\n            if (validates[name]) {\n                acc[name] = validates[name](formData[name]);\n            }\n            return acc;\n        }, {});\n\n        setErrors(newErrors);\n\n        if (Object.values(newErrors).every((error) => !error)) {\n            callback(formData);\n        }\n    }\n\n    const updataFormData = (newFormData, validate = true) => {\n        if(!newFormData) throw new Error('newFormData is required');\n        setFormData((prev) => ({ ...prev, ...newFormData }));\n        validate && Object.keys(newFormData).forEach((name) => {\n            if (validates[name]) {\n                setErrors((prev) => ({ ...prev, [name]: validates[name](newFormData[name]) }));\n            }\n        })\n    }\n\n    return ({ register, handleSubmit, formState: { formData, errors }, updataFormData, unregister })\n}\n```\n","source":"_posts/customHooks.md","raw":"---\ntitle:  custom hooks\ndate: {{ date }}\ntags:\n---\n\n一些平时项目中封装的自定义hooks\n\n<!-- more -->\n1、useWatch\n\n>代码\n\n```\ntype Callback<T> = (prev: T | undefined) => void\ntype Config = {\n  immediate: boolean\n}\n\nexport function useWatch<T>(\n  dep: T,\n  callback: Callback<T>,\n  config: Config = { immediate: false },\n) {\n  const { immediate } = config\n\n  const prev = useRef<T>()\n  const inited = useRef(false)\n\n  useEffect(() => {\n    const execute = () => callback(prev.current)\n\n    if (!inited.current) {\n      inited.current = true\n      if (immediate) {\n        execute()\n      }\n    } else {\n      execute()\n    }\n    prev.current = dep\n  }, [dep])\n}\n```\n\n2、useEffectAsync\n\n```\nexport const useEffectAsync = (effect, deps) => {\n  const dispatch = useDispatch();\n  const ref = useRef();\n  useEffect(() => {\n    effect()\n      .then((result) => ref.current = result)\n      .catch((error) => dispatch(errorsActions.push(error.message)));\n      \n    return () => {\n      const result = ref.current;\n      if (result) {\n        result();\n      }\n    };\n  }, [...deps, dispatch]);\n};\n```\n\n3.useForm\n```\nexport default () => {\n    const [formData, setFormData] = useState({});\n    const [errors, setErrors] = useState({});\n    const [validates, setValidates] = useState({});\n\n    const register = (name, { defaultValue, validate }) => {\n        if (!name) throw new Error('name is required');\n        if (formData[name] === undefined) setFormData((prev) => ({ ...prev, [name]: defaultValue || '' }))\n        if (errors[name] === undefined) setErrors((prev) => ({ ...prev, [name]: '' }));\n        if (validate && validates[name] === undefined) setValidates((prev) => ({ ...prev, [name]: validate }))\n\n        return {\n            value: formData[name] || '',\n            error: !!errors[name],\n            onChange: (event) => {\n                const { value } = event.target;\n                setFormData((prev) => ({ ...prev, [name]: value }));\n                validate && setErrors((prev) => ({ ...prev, [name]: validate(value) }));\n            },\n            onBlur: () => {\n                validate && setErrors((prev) => ({ ...prev, [name]: validate(formData[name]) }));\n            },\n        };\n    }\n\n    const unregister = (name) => {\n        if (!name) throw new Error('name is required');\n        setFormData((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n        setErrors((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n        setValidates((prev) => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n        });\n    }\n\n    const handleSubmit = (callback) => {\n        if (!callback) throw new Error('callback is required');\n        const newErrors = Object.keys(validates).reduce((acc, name) => {\n            if (validates[name]) {\n                acc[name] = validates[name](formData[name]);\n            }\n            return acc;\n        }, {});\n\n        setErrors(newErrors);\n\n        if (Object.values(newErrors).every((error) => !error)) {\n            callback(formData);\n        }\n    }\n\n    const updataFormData = (newFormData, validate = true) => {\n        if(!newFormData) throw new Error('newFormData is required');\n        setFormData((prev) => ({ ...prev, ...newFormData }));\n        validate && Object.keys(newFormData).forEach((name) => {\n            if (validates[name]) {\n                setErrors((prev) => ({ ...prev, [name]: validates[name](newFormData[name]) }));\n            }\n        })\n    }\n\n    return ({ register, handleSubmit, formState: { formData, errors }, updataFormData, unregister })\n}\n```\n","slug":"customHooks","published":1,"updated":"2023-04-14T07:14:07.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgg7spc400000zn1e90y39jz","content":"<p>一些平时项目中封装的自定义hooks</p>\n<span id=\"more\"></span>\n<p>1、useWatch</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Callback&lt;T&gt; = (prev: T | undefined) =&gt; void</span><br><span class=\"line\">type Config = &#123;</span><br><span class=\"line\">  immediate: boolean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function useWatch&lt;T&gt;(</span><br><span class=\"line\">  dep: T,</span><br><span class=\"line\">  callback: Callback&lt;T&gt;,</span><br><span class=\"line\">  config: Config = &#123; immediate: false &#125;,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const &#123; immediate &#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">  const prev = useRef&lt;T&gt;()</span><br><span class=\"line\">  const inited = useRef(false)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    const execute = () =&gt; callback(prev.current)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!inited.current) &#123;</span><br><span class=\"line\">      inited.current = true</span><br><span class=\"line\">      if (immediate) &#123;</span><br><span class=\"line\">        execute()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      execute()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prev.current = dep</span><br><span class=\"line\">  &#125;, [dep])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、useEffectAsync</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const useEffectAsync = (effect, deps) =&gt; &#123;</span><br><span class=\"line\">  const dispatch = useDispatch();</span><br><span class=\"line\">  const ref = useRef();</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">      .then((result) =&gt; ref.current = result)</span><br><span class=\"line\">      .catch((error) =&gt; dispatch(errorsActions.push(error.message)));</span><br><span class=\"line\">      </span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      const result = ref.current;</span><br><span class=\"line\">      if (result) &#123;</span><br><span class=\"line\">        result();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, [...deps, dispatch]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>3.useForm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">    const [formData, setFormData] = useState(&#123;&#125;);</span><br><span class=\"line\">    const [errors, setErrors] = useState(&#123;&#125;);</span><br><span class=\"line\">    const [validates, setValidates] = useState(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    const register = (name, &#123; defaultValue, validate &#125;) =&gt; &#123;</span><br><span class=\"line\">        if (!name) throw new Error(&#x27;name is required&#x27;);</span><br><span class=\"line\">        if (formData[name] === undefined) setFormData((prev) =&gt; (&#123; ...prev, [name]: defaultValue || &#x27;&#x27; &#125;))</span><br><span class=\"line\">        if (errors[name] === undefined) setErrors((prev) =&gt; (&#123; ...prev, [name]: &#x27;&#x27; &#125;));</span><br><span class=\"line\">        if (validate &amp;&amp; validates[name] === undefined) setValidates((prev) =&gt; (&#123; ...prev, [name]: validate &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            value: formData[name] || &#x27;&#x27;,</span><br><span class=\"line\">            error: !!errors[name],</span><br><span class=\"line\">            onChange: (event) =&gt; &#123;</span><br><span class=\"line\">                const &#123; value &#125; = event.target;</span><br><span class=\"line\">                setFormData((prev) =&gt; (&#123; ...prev, [name]: value &#125;));</span><br><span class=\"line\">                validate &amp;&amp; setErrors((prev) =&gt; (&#123; ...prev, [name]: validate(value) &#125;));</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            onBlur: () =&gt; &#123;</span><br><span class=\"line\">                validate &amp;&amp; setErrors((prev) =&gt; (&#123; ...prev, [name]: validate(formData[name]) &#125;));</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const unregister = (name) =&gt; &#123;</span><br><span class=\"line\">        if (!name) throw new Error(&#x27;name is required&#x27;);</span><br><span class=\"line\">        setFormData((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setErrors((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setValidates((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleSubmit = (callback) =&gt; &#123;</span><br><span class=\"line\">        if (!callback) throw new Error(&#x27;callback is required&#x27;);</span><br><span class=\"line\">        const newErrors = Object.keys(validates).reduce((acc, name) =&gt; &#123;</span><br><span class=\"line\">            if (validates[name]) &#123;</span><br><span class=\"line\">                acc[name] = validates[name](formData[name]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return acc;</span><br><span class=\"line\">        &#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setErrors(newErrors);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Object.values(newErrors).every((error) =&gt; !error)) &#123;</span><br><span class=\"line\">            callback(formData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const updataFormData = (newFormData, validate = true) =&gt; &#123;</span><br><span class=\"line\">        if(!newFormData) throw new Error(&#x27;newFormData is required&#x27;);</span><br><span class=\"line\">        setFormData((prev) =&gt; (&#123; ...prev, ...newFormData &#125;));</span><br><span class=\"line\">        validate &amp;&amp; Object.keys(newFormData).forEach((name) =&gt; &#123;</span><br><span class=\"line\">            if (validates[name]) &#123;</span><br><span class=\"line\">                setErrors((prev) =&gt; (&#123; ...prev, [name]: validates[name](newFormData[name]) &#125;));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (&#123; register, handleSubmit, formState: &#123; formData, errors &#125;, updataFormData, unregister &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一些平时项目中封装的自定义hooks</p>","more":"<p>1、useWatch</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Callback&lt;T&gt; = (prev: T | undefined) =&gt; void</span><br><span class=\"line\">type Config = &#123;</span><br><span class=\"line\">  immediate: boolean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function useWatch&lt;T&gt;(</span><br><span class=\"line\">  dep: T,</span><br><span class=\"line\">  callback: Callback&lt;T&gt;,</span><br><span class=\"line\">  config: Config = &#123; immediate: false &#125;,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const &#123; immediate &#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">  const prev = useRef&lt;T&gt;()</span><br><span class=\"line\">  const inited = useRef(false)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    const execute = () =&gt; callback(prev.current)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!inited.current) &#123;</span><br><span class=\"line\">      inited.current = true</span><br><span class=\"line\">      if (immediate) &#123;</span><br><span class=\"line\">        execute()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      execute()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prev.current = dep</span><br><span class=\"line\">  &#125;, [dep])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、useEffectAsync</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const useEffectAsync = (effect, deps) =&gt; &#123;</span><br><span class=\"line\">  const dispatch = useDispatch();</span><br><span class=\"line\">  const ref = useRef();</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">      .then((result) =&gt; ref.current = result)</span><br><span class=\"line\">      .catch((error) =&gt; dispatch(errorsActions.push(error.message)));</span><br><span class=\"line\">      </span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      const result = ref.current;</span><br><span class=\"line\">      if (result) &#123;</span><br><span class=\"line\">        result();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, [...deps, dispatch]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>3.useForm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">    const [formData, setFormData] = useState(&#123;&#125;);</span><br><span class=\"line\">    const [errors, setErrors] = useState(&#123;&#125;);</span><br><span class=\"line\">    const [validates, setValidates] = useState(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    const register = (name, &#123; defaultValue, validate &#125;) =&gt; &#123;</span><br><span class=\"line\">        if (!name) throw new Error(&#x27;name is required&#x27;);</span><br><span class=\"line\">        if (formData[name] === undefined) setFormData((prev) =&gt; (&#123; ...prev, [name]: defaultValue || &#x27;&#x27; &#125;))</span><br><span class=\"line\">        if (errors[name] === undefined) setErrors((prev) =&gt; (&#123; ...prev, [name]: &#x27;&#x27; &#125;));</span><br><span class=\"line\">        if (validate &amp;&amp; validates[name] === undefined) setValidates((prev) =&gt; (&#123; ...prev, [name]: validate &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            value: formData[name] || &#x27;&#x27;,</span><br><span class=\"line\">            error: !!errors[name],</span><br><span class=\"line\">            onChange: (event) =&gt; &#123;</span><br><span class=\"line\">                const &#123; value &#125; = event.target;</span><br><span class=\"line\">                setFormData((prev) =&gt; (&#123; ...prev, [name]: value &#125;));</span><br><span class=\"line\">                validate &amp;&amp; setErrors((prev) =&gt; (&#123; ...prev, [name]: validate(value) &#125;));</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            onBlur: () =&gt; &#123;</span><br><span class=\"line\">                validate &amp;&amp; setErrors((prev) =&gt; (&#123; ...prev, [name]: validate(formData[name]) &#125;));</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const unregister = (name) =&gt; &#123;</span><br><span class=\"line\">        if (!name) throw new Error(&#x27;name is required&#x27;);</span><br><span class=\"line\">        setFormData((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setErrors((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        setValidates((prev) =&gt; &#123;</span><br><span class=\"line\">            const &#123; [name]: _, ...rest &#125; = prev;</span><br><span class=\"line\">            return rest;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const handleSubmit = (callback) =&gt; &#123;</span><br><span class=\"line\">        if (!callback) throw new Error(&#x27;callback is required&#x27;);</span><br><span class=\"line\">        const newErrors = Object.keys(validates).reduce((acc, name) =&gt; &#123;</span><br><span class=\"line\">            if (validates[name]) &#123;</span><br><span class=\"line\">                acc[name] = validates[name](formData[name]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return acc;</span><br><span class=\"line\">        &#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setErrors(newErrors);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Object.values(newErrors).every((error) =&gt; !error)) &#123;</span><br><span class=\"line\">            callback(formData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const updataFormData = (newFormData, validate = true) =&gt; &#123;</span><br><span class=\"line\">        if(!newFormData) throw new Error(&#x27;newFormData is required&#x27;);</span><br><span class=\"line\">        setFormData((prev) =&gt; (&#123; ...prev, ...newFormData &#125;));</span><br><span class=\"line\">        validate &amp;&amp; Object.keys(newFormData).forEach((name) =&gt; &#123;</span><br><span class=\"line\">            if (validates[name]) &#123;</span><br><span class=\"line\">                setErrors((prev) =&gt; (&#123; ...prev, [name]: validates[name](newFormData[name]) &#125;));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (&#123; register, handleSubmit, formState: &#123; formData, errors &#125;, updataFormData, unregister &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"native-js","date":"2023-06-25T02:45:54.551Z","_content":"\n行车记录仪app-h5项目，js和app端通信\nAndroid是在window上挂一个自定义对象，iOS是借助MessageHandler\n\n<!-- more -->\n\n```\nexport default function initNativeJs() {\n    if (typeof window === 'undefined') return  // 服务端渲染时return\n\n    var atotojs = {};\n    atotojs.os = {};\n    atotojs.os.isIOS = /iOS|iPhone|iPad|iPod/i.test(navigator.userAgent);\n    atotojs.os.isAndroid = !atotojs.os.isIOS;\n    atotojs.callbacks = {}\n\n    atotojs.takeNativeActionWithCallback = function (commandName, parameters, callback) {\n        var callbackName = \"nativetojs_callback_\" + (new Date()).getTime() + \"_\" + Math.floor(Math.random() * 10000);\n        atotojs.callbacks[callbackName] = callback;\n\n        var request = {};\n        request.name = commandName;\n        request.param = parameters;\n        request.callbackName = callbackName;\n        // AtotoWebView是约定的名称\n        if (window.atotojs.os.isAndroid) {\n            // takeNativeAction是Android那边定义的方法\n            window.AtotoWebView.takeNativeAction(JSON.stringify(request));\n        } else {\n            window.webkit.messageHandlers.AtotoWebView.postMessage(JSON.stringify(request))\n        }\n    }\n\n    window.atotojs = atotojs;\n}\n```\n","source":"_posts/native-js.md","raw":"---\ntitle:  native-js\ndate: {{ date }}\ntags:\n---\n\n行车记录仪app-h5项目，js和app端通信\nAndroid是在window上挂一个自定义对象，iOS是借助MessageHandler\n\n<!-- more -->\n\n```\nexport default function initNativeJs() {\n    if (typeof window === 'undefined') return  // 服务端渲染时return\n\n    var atotojs = {};\n    atotojs.os = {};\n    atotojs.os.isIOS = /iOS|iPhone|iPad|iPod/i.test(navigator.userAgent);\n    atotojs.os.isAndroid = !atotojs.os.isIOS;\n    atotojs.callbacks = {}\n\n    atotojs.takeNativeActionWithCallback = function (commandName, parameters, callback) {\n        var callbackName = \"nativetojs_callback_\" + (new Date()).getTime() + \"_\" + Math.floor(Math.random() * 10000);\n        atotojs.callbacks[callbackName] = callback;\n\n        var request = {};\n        request.name = commandName;\n        request.param = parameters;\n        request.callbackName = callbackName;\n        // AtotoWebView是约定的名称\n        if (window.atotojs.os.isAndroid) {\n            // takeNativeAction是Android那边定义的方法\n            window.AtotoWebView.takeNativeAction(JSON.stringify(request));\n        } else {\n            window.webkit.messageHandlers.AtotoWebView.postMessage(JSON.stringify(request))\n        }\n    }\n\n    window.atotojs = atotojs;\n}\n```\n","slug":"native-js","published":1,"updated":"2023-06-25T02:59:49.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljaue0ua0000n4n16xdpbm10","content":"<p>行车记录仪app-h5项目，js和app端通信<br>Android是在window上挂一个自定义对象，iOS是借助MessageHandler</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function initNativeJs() &#123;</span><br><span class=\"line\">    if (typeof window === &#x27;undefined&#x27;) return  // 服务端渲染时return</span><br><span class=\"line\"></span><br><span class=\"line\">    var atotojs = &#123;&#125;;</span><br><span class=\"line\">    atotojs.os = &#123;&#125;;</span><br><span class=\"line\">    atotojs.os.isIOS = /iOS|iPhone|iPad|iPod/i.test(navigator.userAgent);</span><br><span class=\"line\">    atotojs.os.isAndroid = !atotojs.os.isIOS;</span><br><span class=\"line\">    atotojs.callbacks = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    atotojs.takeNativeActionWithCallback = function (commandName, parameters, callback) &#123;</span><br><span class=\"line\">        var callbackName = &quot;nativetojs_callback_&quot; + (new Date()).getTime() + &quot;_&quot; + Math.floor(Math.random() * 10000);</span><br><span class=\"line\">        atotojs.callbacks[callbackName] = callback;</span><br><span class=\"line\"></span><br><span class=\"line\">        var request = &#123;&#125;;</span><br><span class=\"line\">        request.name = commandName;</span><br><span class=\"line\">        request.param = parameters;</span><br><span class=\"line\">        request.callbackName = callbackName;</span><br><span class=\"line\">        // AtotoWebView是约定的名称</span><br><span class=\"line\">        if (window.atotojs.os.isAndroid) &#123;</span><br><span class=\"line\">            // takeNativeAction是Android那边定义的方法</span><br><span class=\"line\">            window.AtotoWebView.takeNativeAction(JSON.stringify(request));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            window.webkit.messageHandlers.AtotoWebView.postMessage(JSON.stringify(request))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    window.atotojs = atotojs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>行车记录仪app-h5项目，js和app端通信<br>Android是在window上挂一个自定义对象，iOS是借助MessageHandler</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function initNativeJs() &#123;</span><br><span class=\"line\">    if (typeof window === &#x27;undefined&#x27;) return  // 服务端渲染时return</span><br><span class=\"line\"></span><br><span class=\"line\">    var atotojs = &#123;&#125;;</span><br><span class=\"line\">    atotojs.os = &#123;&#125;;</span><br><span class=\"line\">    atotojs.os.isIOS = /iOS|iPhone|iPad|iPod/i.test(navigator.userAgent);</span><br><span class=\"line\">    atotojs.os.isAndroid = !atotojs.os.isIOS;</span><br><span class=\"line\">    atotojs.callbacks = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    atotojs.takeNativeActionWithCallback = function (commandName, parameters, callback) &#123;</span><br><span class=\"line\">        var callbackName = &quot;nativetojs_callback_&quot; + (new Date()).getTime() + &quot;_&quot; + Math.floor(Math.random() * 10000);</span><br><span class=\"line\">        atotojs.callbacks[callbackName] = callback;</span><br><span class=\"line\"></span><br><span class=\"line\">        var request = &#123;&#125;;</span><br><span class=\"line\">        request.name = commandName;</span><br><span class=\"line\">        request.param = parameters;</span><br><span class=\"line\">        request.callbackName = callbackName;</span><br><span class=\"line\">        // AtotoWebView是约定的名称</span><br><span class=\"line\">        if (window.atotojs.os.isAndroid) &#123;</span><br><span class=\"line\">            // takeNativeAction是Android那边定义的方法</span><br><span class=\"line\">            window.AtotoWebView.takeNativeAction(JSON.stringify(request));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            window.webkit.messageHandlers.AtotoWebView.postMessage(JSON.stringify(request))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    window.atotojs = atotojs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"seo","date":"2023-06-25T03:11:50.427Z","_content":"\n节后好摸鱼，借此总结一下前段时间做的一些seo相关的工作\nGoogle搜索的文档链接： https://developers.google.com/search/docs\n\n<!-- more -->\n1.网站地图文件（sitemap.xml）\n作为一个新网站，sitemap.xml对于Google 等搜索引擎的抓取非常有用；\nsitemap.xml文档放在站点的根路径。\n\n简单的栗子\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n        <loc>https://m.myatoto.com</loc>\n        <lastmod>2023-05-10T15:02:24.021Z</lastmod>\n    </url>\n</urlset>\n```\n\n2.正确使用a标签跳转，不要使用js做跳转\n\n3.国际化\n采用特定国家/地区网域：\nexample.de\n或\nexample.com/de/\n\nnextjs默认提供这两种配置可供选择\n\n4.使用好meta标签，优化description、keywords等内容\n```\n<meta name=\"viewport\" content=\"...\">  // 表明该网页适合移动设备\n\n```\n\n5.首页尽量减少弹窗，交互设计上能一次展示的内容尽量一次展示，爬虫不会执行js去触发弹窗动作\n\n6.使用服务端渲染或静态页面，spa项目的seo支持很差","source":"_posts/seo.md","raw":"---\ntitle:  seo\ndate: {{ date }}\ntags:\n---\n\n节后好摸鱼，借此总结一下前段时间做的一些seo相关的工作\nGoogle搜索的文档链接： https://developers.google.com/search/docs\n\n<!-- more -->\n1.网站地图文件（sitemap.xml）\n作为一个新网站，sitemap.xml对于Google 等搜索引擎的抓取非常有用；\nsitemap.xml文档放在站点的根路径。\n\n简单的栗子\n```\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n        <loc>https://m.myatoto.com</loc>\n        <lastmod>2023-05-10T15:02:24.021Z</lastmod>\n    </url>\n</urlset>\n```\n\n2.正确使用a标签跳转，不要使用js做跳转\n\n3.国际化\n采用特定国家/地区网域：\nexample.de\n或\nexample.com/de/\n\nnextjs默认提供这两种配置可供选择\n\n4.使用好meta标签，优化description、keywords等内容\n```\n<meta name=\"viewport\" content=\"...\">  // 表明该网页适合移动设备\n\n```\n\n5.首页尽量减少弹窗，交互设计上能一次展示的内容尽量一次展示，爬虫不会执行js去触发弹窗动作\n\n6.使用服务端渲染或静态页面，spa项目的seo支持很差","slug":"seo","published":1,"updated":"2023-06-25T03:53:17.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljclbk3h0000zjn15dmrhdju","content":"<p>节后好摸鱼，借此总结一下前段时间做的一些seo相关的工作<br>Google搜索的文档链接： <a href=\"https://developers.google.com/search/docs\">https://developers.google.com/search/docs</a></p>\n<span id=\"more\"></span>\n<p>1.网站地图文件（sitemap.xml）<br>作为一个新网站，sitemap.xml对于Google 等搜索引擎的抓取非常有用；<br>sitemap.xml文档放在站点的根路径。</p>\n<p>简单的栗子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;</span><br><span class=\"line\">    &lt;url&gt;</span><br><span class=\"line\">        &lt;loc&gt;https://m.myatoto.com&lt;/loc&gt;</span><br><span class=\"line\">        &lt;lastmod&gt;2023-05-10T15:02:24.021Z&lt;/lastmod&gt;</span><br><span class=\"line\">    &lt;/url&gt;</span><br><span class=\"line\">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.正确使用a标签跳转，不要使用js做跳转</p>\n<p>3.国际化<br>采用特定国家/地区网域：<br>example.de<br>或<br>example.com/de/</p>\n<p>nextjs默认提供这两种配置可供选择</p>\n<p>4.使用好meta标签，优化description、keywords等内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;...&quot;&gt;  // 表明该网页适合移动设备</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5.首页尽量减少弹窗，交互设计上能一次展示的内容尽量一次展示，爬虫不会执行js去触发弹窗动作</p>\n<p>6.使用服务端渲染或静态页面，spa项目的seo支持很差</p>\n","site":{"data":{}},"excerpt":"<p>节后好摸鱼，借此总结一下前段时间做的一些seo相关的工作<br>Google搜索的文档链接： <a href=\"https://developers.google.com/search/docs\">https://developers.google.com/search/docs</a></p>","more":"<p>1.网站地图文件（sitemap.xml）<br>作为一个新网站，sitemap.xml对于Google 等搜索引擎的抓取非常有用；<br>sitemap.xml文档放在站点的根路径。</p>\n<p>简单的栗子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;</span><br><span class=\"line\">    &lt;url&gt;</span><br><span class=\"line\">        &lt;loc&gt;https://m.myatoto.com&lt;/loc&gt;</span><br><span class=\"line\">        &lt;lastmod&gt;2023-05-10T15:02:24.021Z&lt;/lastmod&gt;</span><br><span class=\"line\">    &lt;/url&gt;</span><br><span class=\"line\">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.正确使用a标签跳转，不要使用js做跳转</p>\n<p>3.国际化<br>采用特定国家/地区网域：<br>example.de<br>或<br>example.com/de/</p>\n<p>nextjs默认提供这两种配置可供选择</p>\n<p>4.使用好meta标签，优化description、keywords等内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;...&quot;&gt;  // 表明该网页适合移动设备</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>5.首页尽量减少弹窗，交互设计上能一次展示的内容尽量一次展示，爬虫不会执行js去触发弹窗动作</p>\n<p>6.使用服务端渲染或静态页面，spa项目的seo支持很差</p>"},{"title":"nextjs多环境配置、多语言以及自动化构建和部署","date":"2023-06-30T03:50:15.760Z","_content":"\n\n\n<!-- more -->\n\n1.多环境配置我是用的dotenv-cli这个插件，只需要在根目录创建对应的.env文件（如.env.test/.env.production）,然后配置对应的打包和启动命令就好；\n\n```\n\"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"build:test\": \"dotenv -e .env.test next build\",\n    \"build:dev\": \"dotenv -e .env.dev next build\",\n    \"start\": \"next start\",\n    \"start:test\": \"dotenv -e .env.test next start\",\n    \"start:dev\": \"dotenv -e .env.dev next start\",\n    \"lint\": \"next lint\"\n  },\n```\n\n\n2.多语言是使用的next-i18next这个插件，看文档操作就行\nhttps://github.com/i18next/next-i18next\n语言包这块，我们公司是有文案组去翻译，给个在线表格的模版她们，然后将翻译好的表格给我导入，导入用nodejs写了个脚本;\n```\n\nvar xlsx = require('node-xlsx');\nvar fs = require('fs');\nconst path = require('path')\n\nconst fileName = ['en', 'zh', 'ja', 'de', 'fr', 'it', 'es', 'ru', 'nl', 'pl', 'sv', 'tr','pt','zh_TW']\n\nconst fileMap = {\n  en: {},\n  zh: {},\n  ja: {},\n  de: {},\n  fr: {},\n  it: {},\n  es: {},\n  ru: {},\n  nl: {},\n  pl: {},\n  sv: {},\n  tr: {},\n  pt: {},\n  zh_TW: {},\n}\n\ntry {\n  var tableData = xlsx.parse(path.join(__dirname, './lang.xlsx'));\n\n  tableData[0].data?.forEach(row => {\n    row.forEach((col, index) => {\n      // 第一列为key\n      if (index === 0) return\n      fileMap[fileName[index-1]][row[0]] = col\n    })\n  })\n\n  fileName.forEach((name) => {\n    fs.writeFile(\n      path.join(__dirname, `${name}.json`),\n      JSON.stringify(fileMap[name]),\n      function (err) {\n        if (err) {\n          throw err\n        }\n        console.log('save') //文件被保存\n      },\n    )\n  })\n\n} catch (error) {\n  console.log(error, 111)\n}\n\n```\n\n3.自动化构建和部署用的Jenkins\nJenkins用的不熟，简单配置，先配置仓库地址和分支，然后跑shell命令构建\n\n```\necho \"start.......\"\ncd /var/jenkins_home/workspace/atoto-mall-mobile\ndocker rmi -f atoto-mall-mobile:1.0.0\ndocker build -t atoto-mall-mobile:1.0.0 .\ndocker rm -f atoto-mall-mobile\ndocker run -d -p 3033:3000 --name atoto-mall-mobile atoto-mall-mobile:1.0.0\necho \"创建容器并启动成功！\"\n```\n\ndocker也用的不熟，简单写了个Dockerfile,放项目根目录\n\n```\n# 基础镜像\nFROM node:16.17.0\n\n# 设置工作目录\nWORKDIR /app\n\n# 将项目文件复制到工作目录\nCOPY . /app\n\n# 安装依赖项\n\nRUN yarn\n\nRUN npm run build:dev\n\n# 暴露端口（根据需要）\nEXPOSE 3000\n\n# 启动应用程序\nCMD [ \"npm\", \"run\", \"start:dev\" ]\n```\n 然后就是nginx的配置，将80端口和对应路径转发到3033端口","source":"_posts/ci-cd.md","raw":"---\ntitle:  nextjs多环境配置、多语言以及自动化构建和部署\ndate: {{ date }}\ntags:\n---\n\n\n\n<!-- more -->\n\n1.多环境配置我是用的dotenv-cli这个插件，只需要在根目录创建对应的.env文件（如.env.test/.env.production）,然后配置对应的打包和启动命令就好；\n\n```\n\"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"build:test\": \"dotenv -e .env.test next build\",\n    \"build:dev\": \"dotenv -e .env.dev next build\",\n    \"start\": \"next start\",\n    \"start:test\": \"dotenv -e .env.test next start\",\n    \"start:dev\": \"dotenv -e .env.dev next start\",\n    \"lint\": \"next lint\"\n  },\n```\n\n\n2.多语言是使用的next-i18next这个插件，看文档操作就行\nhttps://github.com/i18next/next-i18next\n语言包这块，我们公司是有文案组去翻译，给个在线表格的模版她们，然后将翻译好的表格给我导入，导入用nodejs写了个脚本;\n```\n\nvar xlsx = require('node-xlsx');\nvar fs = require('fs');\nconst path = require('path')\n\nconst fileName = ['en', 'zh', 'ja', 'de', 'fr', 'it', 'es', 'ru', 'nl', 'pl', 'sv', 'tr','pt','zh_TW']\n\nconst fileMap = {\n  en: {},\n  zh: {},\n  ja: {},\n  de: {},\n  fr: {},\n  it: {},\n  es: {},\n  ru: {},\n  nl: {},\n  pl: {},\n  sv: {},\n  tr: {},\n  pt: {},\n  zh_TW: {},\n}\n\ntry {\n  var tableData = xlsx.parse(path.join(__dirname, './lang.xlsx'));\n\n  tableData[0].data?.forEach(row => {\n    row.forEach((col, index) => {\n      // 第一列为key\n      if (index === 0) return\n      fileMap[fileName[index-1]][row[0]] = col\n    })\n  })\n\n  fileName.forEach((name) => {\n    fs.writeFile(\n      path.join(__dirname, `${name}.json`),\n      JSON.stringify(fileMap[name]),\n      function (err) {\n        if (err) {\n          throw err\n        }\n        console.log('save') //文件被保存\n      },\n    )\n  })\n\n} catch (error) {\n  console.log(error, 111)\n}\n\n```\n\n3.自动化构建和部署用的Jenkins\nJenkins用的不熟，简单配置，先配置仓库地址和分支，然后跑shell命令构建\n\n```\necho \"start.......\"\ncd /var/jenkins_home/workspace/atoto-mall-mobile\ndocker rmi -f atoto-mall-mobile:1.0.0\ndocker build -t atoto-mall-mobile:1.0.0 .\ndocker rm -f atoto-mall-mobile\ndocker run -d -p 3033:3000 --name atoto-mall-mobile atoto-mall-mobile:1.0.0\necho \"创建容器并启动成功！\"\n```\n\ndocker也用的不熟，简单写了个Dockerfile,放项目根目录\n\n```\n# 基础镜像\nFROM node:16.17.0\n\n# 设置工作目录\nWORKDIR /app\n\n# 将项目文件复制到工作目录\nCOPY . /app\n\n# 安装依赖项\n\nRUN yarn\n\nRUN npm run build:dev\n\n# 暴露端口（根据需要）\nEXPOSE 3000\n\n# 启动应用程序\nCMD [ \"npm\", \"run\", \"start:dev\" ]\n```\n 然后就是nginx的配置，将80端口和对应路径转发到3033端口","slug":"ci-cd","published":1,"updated":"2023-06-30T06:42:12.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clji8jua5000028n1emqe98o8","content":"<span id=\"more\"></span>\n\n<p>1.多环境配置我是用的dotenv-cli这个插件，只需要在根目录创建对应的.env文件（如.env.test/.env.production）,然后配置对应的打包和启动命令就好；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;next dev&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;next build&quot;,</span><br><span class=\"line\">    &quot;build:test&quot;: &quot;dotenv -e .env.test next build&quot;,</span><br><span class=\"line\">    &quot;build:dev&quot;: &quot;dotenv -e .env.dev next build&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;next start&quot;,</span><br><span class=\"line\">    &quot;start:test&quot;: &quot;dotenv -e .env.test next start&quot;,</span><br><span class=\"line\">    &quot;start:dev&quot;: &quot;dotenv -e .env.dev next start&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;next lint&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n<p>2.多语言是使用的next-i18next这个插件，看文档操作就行<br><a href=\"https://github.com/i18next/next-i18next\">https://github.com/i18next/next-i18next</a><br>语言包这块，我们公司是有文案组去翻译，给个在线表格的模版她们，然后将翻译好的表格给我导入，导入用nodejs写了个脚本;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var xlsx = require(&#x27;node-xlsx&#x27;);</span><br><span class=\"line\">var fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const path = require(&#x27;path&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const fileName = [&#x27;en&#x27;, &#x27;zh&#x27;, &#x27;ja&#x27;, &#x27;de&#x27;, &#x27;fr&#x27;, &#x27;it&#x27;, &#x27;es&#x27;, &#x27;ru&#x27;, &#x27;nl&#x27;, &#x27;pl&#x27;, &#x27;sv&#x27;, &#x27;tr&#x27;,&#x27;pt&#x27;,&#x27;zh_TW&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">const fileMap = &#123;</span><br><span class=\"line\">  en: &#123;&#125;,</span><br><span class=\"line\">  zh: &#123;&#125;,</span><br><span class=\"line\">  ja: &#123;&#125;,</span><br><span class=\"line\">  de: &#123;&#125;,</span><br><span class=\"line\">  fr: &#123;&#125;,</span><br><span class=\"line\">  it: &#123;&#125;,</span><br><span class=\"line\">  es: &#123;&#125;,</span><br><span class=\"line\">  ru: &#123;&#125;,</span><br><span class=\"line\">  nl: &#123;&#125;,</span><br><span class=\"line\">  pl: &#123;&#125;,</span><br><span class=\"line\">  sv: &#123;&#125;,</span><br><span class=\"line\">  tr: &#123;&#125;,</span><br><span class=\"line\">  pt: &#123;&#125;,</span><br><span class=\"line\">  zh_TW: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  var tableData = xlsx.parse(path.join(__dirname, &#x27;./lang.xlsx&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">  tableData[0].data?.forEach(row =&gt; &#123;</span><br><span class=\"line\">    row.forEach((col, index) =&gt; &#123;</span><br><span class=\"line\">      // 第一列为key</span><br><span class=\"line\">      if (index === 0) return</span><br><span class=\"line\">      fileMap[fileName[index-1]][row[0]] = col</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  fileName.forEach((name) =&gt; &#123;</span><br><span class=\"line\">    fs.writeFile(</span><br><span class=\"line\">      path.join(__dirname, `$&#123;name&#125;.json`),</span><br><span class=\"line\">      JSON.stringify(fileMap[name]),</span><br><span class=\"line\">      function (err) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">          throw err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(&#x27;save&#x27;) //文件被保存</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (error) &#123;</span><br><span class=\"line\">  console.log(error, 111)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.自动化构建和部署用的Jenkins<br>Jenkins用的不熟，简单配置，先配置仓库地址和分支，然后跑shell命令构建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;start.......&quot;</span><br><span class=\"line\">cd /var/jenkins_home/workspace/atoto-mall-mobile</span><br><span class=\"line\">docker rmi -f atoto-mall-mobile:1.0.0</span><br><span class=\"line\">docker build -t atoto-mall-mobile:1.0.0 .</span><br><span class=\"line\">docker rm -f atoto-mall-mobile</span><br><span class=\"line\">docker run -d -p 3033:3000 --name atoto-mall-mobile atoto-mall-mobile:1.0.0</span><br><span class=\"line\">echo &quot;创建容器并启动成功！&quot;</span><br></pre></td></tr></table></figure>\n\n<p>docker也用的不熟，简单写了个Dockerfile,放项目根目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基础镜像</span><br><span class=\"line\">FROM node:16.17.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置工作目录</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 将项目文件复制到工作目录</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖项</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yarn</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build:dev</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口（根据需要）</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动应用程序</span><br><span class=\"line\">CMD [ &quot;npm&quot;, &quot;run&quot;, &quot;start:dev&quot; ]</span><br></pre></td></tr></table></figure>\n<p> 然后就是nginx的配置，将80端口和对应路径转发到3033端口</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.多环境配置我是用的dotenv-cli这个插件，只需要在根目录创建对应的.env文件（如.env.test/.env.production）,然后配置对应的打包和启动命令就好；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;next dev&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;next build&quot;,</span><br><span class=\"line\">    &quot;build:test&quot;: &quot;dotenv -e .env.test next build&quot;,</span><br><span class=\"line\">    &quot;build:dev&quot;: &quot;dotenv -e .env.dev next build&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;next start&quot;,</span><br><span class=\"line\">    &quot;start:test&quot;: &quot;dotenv -e .env.test next start&quot;,</span><br><span class=\"line\">    &quot;start:dev&quot;: &quot;dotenv -e .env.dev next start&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;next lint&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n<p>2.多语言是使用的next-i18next这个插件，看文档操作就行<br><a href=\"https://github.com/i18next/next-i18next\">https://github.com/i18next/next-i18next</a><br>语言包这块，我们公司是有文案组去翻译，给个在线表格的模版她们，然后将翻译好的表格给我导入，导入用nodejs写了个脚本;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var xlsx = require(&#x27;node-xlsx&#x27;);</span><br><span class=\"line\">var fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const path = require(&#x27;path&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const fileName = [&#x27;en&#x27;, &#x27;zh&#x27;, &#x27;ja&#x27;, &#x27;de&#x27;, &#x27;fr&#x27;, &#x27;it&#x27;, &#x27;es&#x27;, &#x27;ru&#x27;, &#x27;nl&#x27;, &#x27;pl&#x27;, &#x27;sv&#x27;, &#x27;tr&#x27;,&#x27;pt&#x27;,&#x27;zh_TW&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">const fileMap = &#123;</span><br><span class=\"line\">  en: &#123;&#125;,</span><br><span class=\"line\">  zh: &#123;&#125;,</span><br><span class=\"line\">  ja: &#123;&#125;,</span><br><span class=\"line\">  de: &#123;&#125;,</span><br><span class=\"line\">  fr: &#123;&#125;,</span><br><span class=\"line\">  it: &#123;&#125;,</span><br><span class=\"line\">  es: &#123;&#125;,</span><br><span class=\"line\">  ru: &#123;&#125;,</span><br><span class=\"line\">  nl: &#123;&#125;,</span><br><span class=\"line\">  pl: &#123;&#125;,</span><br><span class=\"line\">  sv: &#123;&#125;,</span><br><span class=\"line\">  tr: &#123;&#125;,</span><br><span class=\"line\">  pt: &#123;&#125;,</span><br><span class=\"line\">  zh_TW: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  var tableData = xlsx.parse(path.join(__dirname, &#x27;./lang.xlsx&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">  tableData[0].data?.forEach(row =&gt; &#123;</span><br><span class=\"line\">    row.forEach((col, index) =&gt; &#123;</span><br><span class=\"line\">      // 第一列为key</span><br><span class=\"line\">      if (index === 0) return</span><br><span class=\"line\">      fileMap[fileName[index-1]][row[0]] = col</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  fileName.forEach((name) =&gt; &#123;</span><br><span class=\"line\">    fs.writeFile(</span><br><span class=\"line\">      path.join(__dirname, `$&#123;name&#125;.json`),</span><br><span class=\"line\">      JSON.stringify(fileMap[name]),</span><br><span class=\"line\">      function (err) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">          throw err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(&#x27;save&#x27;) //文件被保存</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (error) &#123;</span><br><span class=\"line\">  console.log(error, 111)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.自动化构建和部署用的Jenkins<br>Jenkins用的不熟，简单配置，先配置仓库地址和分支，然后跑shell命令构建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;start.......&quot;</span><br><span class=\"line\">cd /var/jenkins_home/workspace/atoto-mall-mobile</span><br><span class=\"line\">docker rmi -f atoto-mall-mobile:1.0.0</span><br><span class=\"line\">docker build -t atoto-mall-mobile:1.0.0 .</span><br><span class=\"line\">docker rm -f atoto-mall-mobile</span><br><span class=\"line\">docker run -d -p 3033:3000 --name atoto-mall-mobile atoto-mall-mobile:1.0.0</span><br><span class=\"line\">echo &quot;创建容器并启动成功！&quot;</span><br></pre></td></tr></table></figure>\n\n<p>docker也用的不熟，简单写了个Dockerfile,放项目根目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 基础镜像</span><br><span class=\"line\">FROM node:16.17.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置工作目录</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 将项目文件复制到工作目录</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖项</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yarn</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm run build:dev</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口（根据需要）</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动应用程序</span><br><span class=\"line\">CMD [ &quot;npm&quot;, &quot;run&quot;, &quot;start:dev&quot; ]</span><br></pre></td></tr></table></figure>\n<p> 然后就是nginx的配置，将80端口和对应路径转发到3033端口</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}